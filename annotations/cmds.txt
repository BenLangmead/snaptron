#for adapting the various annotations sources' names into a consistent 2 letter code to be used in snaptron's return data format
find . -name "*" | grep gz | perl -ne  'chomp; $s0=$_; @f0=split(/\//,$s0); $s=$f0[2]; @f=split(/\./,$s); $v='38'; $v='19' if($s0=~/hg19/); $s1=$f[0]; @c=split(//,$s1); $s2=$c[0]; foreach $c (@c) { $s2.=$c if($c=~/[A-Z]/); last if(length($s2) > 1);}  $s2='aC' if($s1=~/acembly/); $s2='gC' if($s1=~/gencode/); print "\"$s"."_hg$v\":\"$s2"."$v\","; END { print "\n";}'


#to create snaptron ready version of post-processed rail output of junctions;
#adds fields which show annotation of both, start, and end sites including annotation sources
#also creates snaptron id and adds count, sum, average, and median of read coverage over samples
#SRAv2 version
gzip -cd /data2/gigatron2/intropolis.v2.hg38.tsv.gz | pypy /data/gigatron/snaptron/annotations/process_introns.py --annotations annotated_junctions_with_sources.tsv.gz | perl -ne 'BEGIN {$data_source_id=0;} chomp; $s=$_; @f=split(/\t/,$s); @f1=split(/,/,$f[11]); @f2=split(/,/,$f[12]); $f1=scalar @f1; $f2=scalar @f2; $s2=0; map { $s2+=$_; } @f2; $avg=$s2/$f2; $median=-1; $m_=$f2/2; $m_=int($m_); @f2a=sort {$a<=>$b} @f2; if(($f2 % 2)==0) { $m2_=$f2/2; $m2_-=1; $median=($f2a[$m_]+$f2a[$m2_])/2; } else { $median=$f2a[$m_]; }  printf("$s\t$f1\t$s2\t%.3f\t%.3f\t$data_source_id\n",$avg,$median);' | bgzip > /data/gigatron/intropolis.v2.hg38.tsv.snaptron2.bgzip

#gtex version (w/o median2)
gzip -cd /data2/gigatron2/gtex/consolidated_gtex_junctions.tsv.gz | pypy /data/gigatron/snaptron/process_introns.py --annotations annotated_junctions_with_sources.tsv.gz | perl -ne 'BEGIN {$data_source_id=1;} chomp; $s=$_; @f=split(/\t/,$s); @f1=split(/,/,$f[11]); @f2=split(/,/,$f[12]); @f3=split(/,/,$f[13]); $f1=scalar @f1; $f2=scalar @f2; $f3=scalar @f3; $s2=0; map { $s2+=$_; } @f2; $avg=$s2/$f2; $median=-1; $m_=$f2/2; $m_=int($m_); @f2a=sort {$a<=>$b} @f2; if(($f2 % 2)==0) { $m2_=$f2/2; $m2_-=1; $median=($f2a[$m_]+$f2a[$m2_])/2; } else { $median=$f2a[$m_]; } $s3=0; map { $s3+=$_; } @f3; $avg2=$s3/$f3; $median2=-1; $m_=$f3/2; $m_=int($m_); @f3a=sort {$a<=>$b} @f3; if(($f3 % 2)==0) { $m2_=$f3/2; $m2_-=1; $median2=($f3a[$m_]+$f3a[$m2_])/2; } else { $median2=$f3a[$m_]; } printf("$s\t$f1\t$s2\t%.3f\t%.3f\t$s3\t%.3f\t$data_source_id\n",$avg,$median,$avg2);' | bgzip > /data2/gigatron2/gtex/consolidated_gtex_junctions.tsv.snaptron.bgzip


#sraV2 (50k), old 3-source (but still HG38) annotation version
gzip -cd /data2/gigatron2/intropolis.v2.hg38.tsv.gz | pypy /data/gigatron/snaptron/process_introns.py --annotation gencode.v24.annotation.gtf Homo_sapiens.GRCh38.84.gtf refGene_20160314.gtf | perl -ne 'BEGIN {$data_source_id=0;} chomp; $s=$_; @f=split(/\t/,$s); @f1=split(/,/,$f[11]); @f2=split(/,/,$f[12]); $f1=scalar @f1; $f2=scalar @f2; $s2=0; map { $s2+=$_; } @f2; $avg=$s2/$f2; $median=-1; $m_=$f2/2; $m_=int($m_); @f2a=sort {$a<=>$b} @f2; if(($f2 % 2)==0) { $m2_=$f2/2; $m2_-=1; $median=($f2a[$m_]+$f2a[$m2_])/2; } else { $median=$f2a[$m_]; }  printf("$s\t$f1\t$s2\t%.3f\t%.3f\t$data_source_id\n",$avg,$median);' | bgzip > /data/gigatron/intropolis.v2.hg38.tsv.snaptron.bgzip
